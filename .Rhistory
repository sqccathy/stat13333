nodes = genNodes(50)
Rc = findRc(nodes) + 10
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes) + 20
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes)
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes) +20
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes) +15
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
Rc = findRc(nodes) +15
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes) +15
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes) +10
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes) +15
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(10)
Rc = findRc(nodes)
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes)
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes)
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
# Creating a helper function for plotting.
plotNetwork = function(){
nodes = genNodes(50)
Rc = findRc(nodes)
x = nodes[, 1]
y = nodes[, 2]
# Transfering the transition matrix to a logical matrix.
distBNodes = as.matrix(dist(nodes))
logical = matrix(as.logical(findTranMat(distBNodes, Rc)), nrow = 50, ncol = 50)
# Applying the sum function across the columns to find how many times each point will be connected with other ones.
# Creating a data frame that contains the x-axis and y-axis of the points and those of the corresponding points.
repeatTimes = apply(logical, 1, sum)
x1 = rep(x, repeatTimes)
y1 = rep(y, repeatTimes)
x2 = numeric()
y2 = numeric()
for(j in 1:50){
x2 = c(x2, x[logical[j, ]])
y2 = c(y2, y[logical[j, ]])
}
df = data.frame(x1, y1, x2, y2)
browser()
# Plotting the network.
ggplot(data = df) +
geom_point(mapping = aes(x = x1, y = y1)) +
geom_segment(mapping = aes(x = x1, y =y1, xend = x2, yend = y2))+
scale_x_continuous(name = "x-axis")+
scale_y_continuous(name = "y-axis")
}
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
df
findRc = function(nodes, tol = 0.05) {
distBNodes = as.matrix(dist(nodes))
range = findRange(distBNodes)
if(range[1] == range[2]) {
return(range[1])
} else {
n = ceiling(log2((max(range) - min(range)) / tol))
for(i in 1:n) {
Rc = sum(range) / 2
TranMat = findTranMat(distBNodes, Rc)
browser()
if(isTRUE(all.equal(1, getEigen2(TranMat)))) {
range[1] = Rc
} else range[2] = Rc
}
return(Rc)
}
}
getEigen2(TranMat)
TranMat
findRc = function(nodes, tol = 0.05) {
distBNodes = as.matrix(dist(nodes))
range = findRange(distBNodes)
if(range[1] == range[2]) {
return(range[1])
} else {
n = ceiling(log2((max(range) - min(range)) / tol))
for(i in 1:n) {
Rc = sum(range) / 2
TranMat = findTranMat(distBNodes, Rc)
browser()
if(isTRUE(all.equal(1, getEigen2(TranMat)))) {
range[1] = Rc
} else range[2] = Rc
}
return(Rc)
}
}
findRc = function(nodes, tol = 0.05)
))
findRc(nodes,tol=0.05)
findRc(genNodes(50))
getEigen2(TranMat)
set.seed(1)
runif(1)
.Random.seed = seeds[[SimTime[1]]]
plotNetwork()
.Random.seed = seeds[[SimTime[1]]]
findRc(genNodes(50))
findRc = function(nodes, tol = 0.05) {
distBNodes = as.matrix(dist(nodes))
range = findRange(distBNodes)
if(range[1] == range[2]) {
return(range[1])
} else {
n = ceiling(log2((max(range) - min(range)) / tol))
for(i in 1:n) {
Rc = sum(range) / 2
TranMat = findTranMat(distBNodes, Rc)
if(isTRUE(all.equal(1, getEigen2(TranMat)))) {
range[1] = Rc
} else range[2] = Rc
}
return(Rc)
}
}
.Random.seed = seeds[[SimTime[1]]]
findRc(genNodes(50))
.Random.seed = seeds[[SimTime[1]]]
genNodes(50)
# Chunk 1
source("http://www.stat.berkeley.edu/users/nolan/data/nodeDensity.R")
# Chunk 2
# Here we take by = 0.5, which is small, to make sure that the grid is dense enough so that the error of the max of the density is small
x = seq(from = 0, to = 100, by = 0.5)
y = seq(from = 0, to = 100, by = 0.5)
# Creating a grid from vectors x and y
gridPts = expand.grid(x, y)
# Searching over the grid for the maximum of the density
zMax = max(nodeDensity(gridPts[[1]], gridPts[[2]]))
# Chunk 3
genNodes = function(n) {
# Generating points in a 3-dimensional rectangle
x1 = runif(100 * n, min = 0, max = 100)
y1 = runif(100 * n, min = 0, max = 100)
z1 = runif(100 * n, min = 0, max = 4)
# Keeping the points	falling in the 3-d region beneath the density
keep = z1 <= nodeDensity(x1, y1)
x1 = x1[keep]
y1 = y1[keep]
# Using the (x, y) coordinates of these "kept" points as the sample
random = sample(seq(0, length(x1)), n)
return(matrix(c(x1[random], y1[random]), ncol = 2))
}
# Chunk 4
# Finding the range of Rc
findRange = function(mat) {
return(c(max(apply(mat, 1, function(x) min(x[x!=min(x)]))), min(apply(mat, 1, max))))
}
# Chunk 5
# Generating the transition matrix
findTranMat = function(mat, R) {
n = nrow(mat)
TranMat = matrix(0, nrow = n, ncol = n)
for(i in 1:n) {
connect = mat[i, ] <= R
connectNum = sum(connect)
TranMat[i, ][connect] = 1 / connectNum
}
return(TranMat)
}
# Chunk 6
# Getting the second largest eigenvalue of a matrix
getEigen2 = function(mat) {
eigen(mat)[[1]][2]
}
# Chunk 7
findRc = function(nodes, tol = 0.05) {
distBNodes = as.matrix(dist(nodes))
range = findRange(distBNodes)
if(range[1] == range[2]) {
return(range[1])
} else {
n = ceiling(log2((max(range) - min(range)) / tol))
for(i in 1:n) {
Rc = sum(range) / 2
TranMat = findTranMat(distBNodes, Rc)
if(isTRUE(all.equal(1, getEigen2(TranMat)))) {
range[1] = Rc
} else range[2] = Rc
}
return(range[2])
}
}
# Finding Rc for different numbers of nodes, each with 1000 simulations and placing them in a data frame with 1000 rows and 6 columns
RC = data.frame(Rc50 = rep(0, 1000), Rc75 = rep(0, 1000), Rc100 = rep(0, 1000), Rc125 = rep(0, 1000), Rc150 = rep(0, 1000), Rc175 = rep(0, 1000))
# Numbers of nodes are chosen as 50, 75, 100, 125, 150 and 175
numNodes = seq(from = 50, by = 25, length = 6)
j = 1
for(n in numNodes) {
# Setting the seed for each number of nodes
set.seed(12345678)
for(i in 1:1000) {
RC[i, j] = findRc(genNodes(n))
}
j = j + 1
}
